=pod

=head1 NAME

PEM_X509_INFO_read_bio, PEM_X509_INFO_read,
PEM_X509_INFO_write_bio
- Read and write X509_INFO to and from BIO and files

=head1 SYNOPSIS
 #include <openssl/pem.h>

 STACK_OF(X509_INFO) *PEM_X509_INFO_read_bio(BIO *bp, STACK_OF(X509_INFO) *sk,
                                             pem_password_cb *cb, void *u);
 STACK_OF(X509_INFO) *PEM_X509_INFO_read(FILE *fp, STACK_OF(X509_INFO) *sk,
                                         pem_password_cb *cb, void *u);

 int PEM_X509_INFO_write_bio(BIO *bp, X509_INFO *xi, EVP_CIPHER *enc,
                             unsigned char *kstr, int klen,
                             pem_password_cb *cd, void *u);


=head1 DESCRIPTION

PEM_X509_INFO_read_bio() tries to parse the PEM entities in B<bp> and return
them in order on a stack. It's handy for reading a certificate chain of
concatenated PEM certificates. If B<sk> is not NULL the read certificates will
be pushed onto the stack in B<sk> instead of an empty new one.
PEM_X509_INFO_read() does the same with a I<FILE> pointer as source instead.

PEM_X509_INFO_write_bio() writes out the members of B<xi> to B<bp> in PEM
encoding one after the other.

The write functions take an B<enc> parameter which specifies the encryption
algorithm to use, encryption is done at the PEM level. If this parameter is set
to NULL then the private key is written in unencrypted form.

The B<cb> argument is the callback to use when querying for the pass
phrase used for encrypted PEM structures (normally only private keys).

For the PEM write routines if the B<kstr> parameter is not NULL then
B<klen> bytes at B<kstr> are used as the passphrase and B<cb> is
ignored.

If the B<cb> parameters is set to NULL and the B<u> parameter is not
NULL then the B<u> parameter is interpreted as a null terminated string
to use as the passphrase. If both B<cb> and B<u> are NULL then the
default callback routine is used which will typically prompt for the
passphrase on the current terminal with echoing turned off.

The default passphrase callback is sometimes inappropriate (for example
in a GUI application) so an alternative can be supplied. The callback
routine has the following form:

 int cb(char *buf, int size, int rwflag, void *u);

=head1 NOTES

I<X509_INFO> is a supertype of I<X509>, I<X509_CRL>, I<X509_PKEY>,
I<EVP_CIPHER_INFO> and can hold all of them together.

=head1 BUGS

PEM_X509_INFO_write_bio() lacks the implementation to
write the potential I<X509_CRL> that a I<X509_INFO> could contain.

=head1 RETURN VALUES

PEM_X509_INFO_read(), and PEM_X509_INFO_read_bio() return a stack of
I<X509_INFO> objects or NULL on failure.

PEM_X509_INFO_write_bio() returns 1 on success or 0 on failure.

=head1 EXAMPLES

Read PEM file containing multiple certs as chain into STACK_OF(X509):

 STACK_OF(X509) *chain = sk_X509_new_null();

 STACK_OF(X509_INFO) *xis = PEM_X509_INFO_read_bio(
         bio, NULL, NULL, NULL);

 for (int i = sk_X509_INFO_num(xis)-1; i >= 0; i--) {
     X509_INFO *xi = sk_X509_INFO_value(xis, i);
     if (xi->x509 && !sk_X509_push(chain, xi->x509))
         break;
 }

=head1 SEE ALSO

L<X509(7)>,
L<DEFINE_STACK_OF(3)>,
L<PEM_read_bio_PrivateKey(3)>,
L<BIO_new(3)>,
L<fopen(3)>

=head1 HISTORY

PEM_X509_INFO_read_bio(), PEM_X509_INFO_read(), and PEM_X509_INFO_write_bio()
have been there since at least SSLeay 0.8.1b/OpenSSL0.9.2b (1998).

=head1 COPYRIGHT

Copyright 2018 The OpenSSL Project Authors. All Rights Reserved.

Licensed under the OpenSSL license (the "License").  You may not use
this file except in compliance with the License.  You can obtain a copy
in the file LICENSE in the source distribution or at
L<https://www.openssl.org/source/license.html>.

=cut
